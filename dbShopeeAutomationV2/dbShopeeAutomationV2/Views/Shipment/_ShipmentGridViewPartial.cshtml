@using dbShopeeAutomationV2.Models;
@using System.Collections.Generic;

@{
    dbShopeeAutomationV2Entities db = new dbShopeeAutomationV2Entities();

    Dictionary<int, string> detailDict = new Dictionary<int, string>();
    db.TShopeeDetails.ToList().ForEach(it =>
    {
        detailDict.Add(it.detail_id, it.last_updated_by);
    });

    List<mStockWarehouse> swList = new List<mStockWarehouse>();
    db.TShopeeStockWarehouses.ToList().ForEach(it =>
    {
        string name = it.name;
        string address = $"{it.address_line_1}, {it.address_line_2}, {it.city}, {it.zip_code}, {it.state}, {it.country}";
        swList.Add(new mStockWarehouse(name, address));
    });


    var grid = Html.DevExpress().GridView(settings => {
        settings.Name = "ShipmentGridView";
        settings.Width = Unit.Percentage(100);
        settings.CallbackRouteValues = new { Controller = "Shipment", Action = "ShipmentGridViewPartial" };

        settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "Shipment", Action = "ShipmentGridViewPartialAddNew" };
        settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "Shipment", Action = "ShipmentGridViewPartialUpdate" };
        settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "Shipment", Action = "ShipmentGridViewPartialDelete" };
        settings.SettingsEditing.Mode = GridViewEditingMode.EditFormAndDisplayRow;
        settings.SettingsBehavior.ConfirmDelete = true;

        settings.CommandColumn.Visible = true;
        settings.CommandColumn.ShowNewButtonInHeader = true;
        settings.CommandColumn.ShowDeleteButton = true;
        settings.CommandColumn.ShowEditButton = true;
        settings.SettingsSearchPanel.Visible = true;

        settings.KeyFieldName = "shipment_id";

        settings.SettingsPager.Visible = true;
        settings.Settings.ShowGroupPanel = true;
        settings.Settings.ShowFilterRow = true;
        settings.SettingsBehavior.AllowSelectByRowClick = true;

        // Header Set Center
        settings.Styles.Header.HorizontalAlign = HorizontalAlign.Center;
        settings.Styles.Header.VerticalAlign = VerticalAlign.Middle;

        // Start location
        settings.Columns.Add(col =>
        {
            col.FieldName = "start_location";
            col.Caption = "Departure Point";

            col.ColumnType = MVCxGridViewColumnType.ComboBox;
            ComboBoxProperties prop = col.PropertiesEdit as ComboBoxProperties;
            prop.DataSource = swList;
            prop.TextField = "name";
            prop.ValueField = "address";
            prop.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
            prop.ValidationSettings.RequiredField.IsRequired = true;
        });

        settings.Columns.Add("destination").Caption = "Destination";

        settings.Columns.Add("tracking_id").Caption = "Tracking ID";

        // Invoice ID
        settings.Columns.Add(col =>
        {
            col.FieldName = "invoice_id";
            col.Caption = "Invoice Code";

            col.ColumnType = MVCxGridViewColumnType.ComboBox;
            ComboBoxProperties prop = col.PropertiesEdit as ComboBoxProperties;
            prop.DataSource = db.TShopeeInvoices.ToList();
            prop.TextField = "invoice_title";
            prop.ValueField = "invoice_id";
            prop.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
            prop.ValidationSettings.RequiredField.IsRequired = true;
        });

        // Carrier Id
        settings.Columns.Add(col =>
        {
            col.FieldName = "carrier_id";
            col.Caption = "Carrier";

            col.ColumnType = MVCxGridViewColumnType.ComboBox;
            ComboBoxProperties prop = col.PropertiesEdit as ComboBoxProperties;
            prop.DataSource = db.TShopeeCarriers.ToList();
            prop.TextField = "name";
            prop.ValueField = "carrier_id";
            prop.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
            prop.ValidationSettings.RequiredField.IsRequired = true;
        });

        // Shipment Status ID
        settings.Columns.Add(col =>
        {
            col.FieldName = "shipment_status_id";
            col.Caption = "Shipment Status";

            col.ColumnType = MVCxGridViewColumnType.ComboBox;
            ComboBoxProperties prop = col.PropertiesEdit as ComboBoxProperties;
            prop.DataSource = db.TShopeeShipmentStatus.ToList();
            prop.TextField = "name";
            prop.ValueField = "shipment_status_id";
            prop.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
            prop.ValidationSettings.RequiredField.IsRequired = true;
        });

        // Created Date
        settings.Columns.Add(col =>
        {
            col.FieldName = "created_date";
            col.Caption = "Created Date";
            col.ColumnType = MVCxGridViewColumnType.DateEdit;
            col.PropertiesEdit.DisplayFormatString = "yyyy-MM-dd";

            DateEditProperties prop = col.PropertiesEdit as DateEditProperties;
            prop.DisplayFormatString = "yyyy-MM-dd";
            prop.DisplayFormatInEditMode = true;
        });

        // Expected Date
        settings.Columns.Add(col =>
        {
            col.FieldName = "expected_date";
            col.Caption = "Expected Date";
            col.ColumnType = MVCxGridViewColumnType.DateEdit;
            col.PropertiesEdit.DisplayFormatString = "yyyy-MM-dd";

            DateEditProperties prop = col.PropertiesEdit as DateEditProperties;
            prop.DisplayFormatString = "yyyy-MM-dd";
            prop.DisplayFormatInEditMode = true;
        });

        // Due Date
        settings.Columns.Add(col =>
        {
            col.FieldName = "due_date";
            col.Caption = "Due Date";
            col.ColumnType = MVCxGridViewColumnType.DateEdit;
            col.PropertiesEdit.DisplayFormatString = "yyyy-MM-dd";

            DateEditProperties prop = col.PropertiesEdit as DateEditProperties;
            prop.DisplayFormatString = "yyyy-MM-dd";
            prop.DisplayFormatInEditMode = true;
        });

        // Last Updated By
        settings.Columns.Add(col =>
        {
            col.FieldName = "Last Updated By";
            col.UnboundType = DevExpress.Data.UnboundColumnType.String;
            col.ReadOnly = true;
        });

        settings.CustomUnboundColumnData = (s, e) =>
        {
            if (e.Column.FieldName.Equals("Last Updated By"))
            {
                int detail_id = int.Parse(e.GetListSourceFieldValue("detail_id").ToString());
                e.Value = detailDict[detail_id];
            };
        };

        // Cell Styles Center
        settings.Styles.Cell.HorizontalAlign = HorizontalAlign.Center;
        settings.Styles.Cell.VerticalAlign = VerticalAlign.Middle;
    });

    if (ViewData["EditError"] != null){
        grid.SetEditErrorText((string)ViewData["EditError"]);
    }
}
@grid.Bind(Model).GetHtml()