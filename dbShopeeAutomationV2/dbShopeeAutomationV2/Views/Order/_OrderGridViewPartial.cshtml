@using dbShopeeAutomationV2.Models;
@using System.Collections.Generic;

@{
    dbShopeeAutomationV2Entities db = new dbShopeeAutomationV2Entities();

    Dictionary<int, string> detailDict = new Dictionary<int, string>();
    db.TShopeeDetails.ToList().ForEach(it =>
    {
        detailDict.Add(it.detail_id, it.last_updated_by);
    });

    var grid = Html.DevExpress().GridView(settings => {
        settings.Name = "OrderGridView";
        settings.Width = Unit.Percentage(100);
        settings.CallbackRouteValues = new { Controller = "Order", Action = "OrderGridViewPartial" };

        settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "Order", Action = "OrderGridViewPartialAddNew" };
        settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "Order", Action = "OrderGridViewPartialUpdate" };
        settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "Order", Action = "OrderGridViewPartialDelete" };
        settings.SettingsEditing.Mode = GridViewEditingMode.EditFormAndDisplayRow;
        settings.SettingsBehavior.ConfirmDelete = true;

        settings.CommandColumn.Visible = true;
        settings.CommandColumn.ShowNewButtonInHeader = true;
        settings.CommandColumn.ShowDeleteButton = true;
        settings.CommandColumn.ShowEditButton = true;

        settings.KeyFieldName = "order_id";

        settings.SettingsPager.Visible = true;
        settings.Settings.ShowGroupPanel = true;
        settings.Settings.ShowFilterRow = true;
        settings.SettingsBehavior.AllowSelectByRowClick = true;
        settings.SettingsSearchPanel.Visible = true;

        // Header Set Center
        settings.Styles.Header.HorizontalAlign = HorizontalAlign.Center;
        settings.Styles.Header.VerticalAlign = VerticalAlign.Middle;

        settings.Columns.Add(col => {
            col.FieldName = "order_title";
            col.Caption = "Order Title";
        });

        // Order Placement Date
        settings.Columns.Add(col => {
            col.FieldName = "order_placed_date";
            col.Caption = "Order Placement Date";

            col.ColumnType = MVCxGridViewColumnType.DateEdit;
            col.PropertiesEdit.DisplayFormatString = "yyyy-MM-dd";

            DateEditProperties prop = col.PropertiesEdit as DateEditProperties;
            prop.DisplayFormatString = "yyyy-MM-dd";
            prop.DisplayFormatInEditMode = true;
        });

        // Select Order Status
        settings.Columns.Add(col =>
        {
            col.FieldName = "order_status_id";
            col.Caption = "Order Status";

            col.ColumnType = MVCxGridViewColumnType.ComboBox;
            ComboBoxProperties prop = col.PropertiesEdit as ComboBoxProperties;
            prop.DataSource = db.TShopeeOrderStatus.ToList();
            prop.TextField = "name";
            prop.ValueField = "order_status_id";
            prop.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
        });

        settings.Columns.Add(col =>
        {
            col.FieldName = "total_price";
            col.Caption = "Total Price";
            col.ReadOnly = true;

            col.ColumnType = MVCxGridViewColumnType.SpinEdit;
            SpinEditProperties prop = col.PropertiesEdit as SpinEditProperties;
            prop.NumberType = SpinEditNumberType.Float;
            prop.MinValue = 0;
            prop.MaxValue = 10000000;
            prop.Increment = 0.1M;
        });

        // Last Updated By
        settings.Columns.Add(col =>
        {
            col.FieldName = "Last Updated By";
            col.UnboundType = DevExpress.Data.UnboundColumnType.String;
            col.ReadOnly = true;
        });

        settings.CustomUnboundColumnData = (s, e) =>
        {
            if (e.Column.FieldName.Equals("Last Updated By"))
            {
                int detail_id = int.Parse(e.GetListSourceFieldValue("detail_id").ToString());
                e.Value = detailDict[detail_id];
            };
        };

        // Cell Styles Center
        settings.Styles.Cell.HorizontalAlign = HorizontalAlign.Center;
        settings.Styles.Cell.VerticalAlign = VerticalAlign.Middle;
    });

    if (ViewData["EditError"] != null){
        grid.SetEditErrorText((string)ViewData["EditError"]);
    }
}
@grid.Bind(Model).GetHtml()