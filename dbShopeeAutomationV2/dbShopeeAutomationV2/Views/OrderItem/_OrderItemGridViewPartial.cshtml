@using dbShopeeAutomationV2.Models;
@using System.Collections.Generic;

@{
    dbShopeeAutomationV2Entities db = new dbShopeeAutomationV2Entities();

    Dictionary<int, string> detailDict = new Dictionary<int, string>();
    db.TShopeeDetails.ToList().ForEach(it =>
    {
        detailDict.Add(it.detail_id, it.last_updated_by);
    });

    Dictionary<int, string> productDict = new Dictionary<int, string>();
    db.TShopeeProducts.ToList().ForEach(it => {
        productDict.Add(it.product_id, it.SKU);
    });

    var grid = Html.DevExpress().GridView(settings => {
        settings.Name = "OrderItemGridView";
        settings.Width = Unit.Percentage(100);
        settings.CallbackRouteValues = new { Controller = "OrderItemStatus", Action = "OrderItemGridViewPartial" };

        settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "OrderItemStatus", Action = "OrderItemGridViewPartialAddNew" };
        settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "OrderItemStatus", Action = "OrderItemGridViewPartialUpdate" };
        settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "OrderItemStatus", Action = "OrderItemGridViewPartialDelete" };
        settings.SettingsEditing.Mode = GridViewEditingMode.EditFormAndDisplayRow;
        settings.SettingsBehavior.ConfirmDelete = true;

        settings.CommandColumn.Visible = true;
        settings.CommandColumn.ShowNewButton = true;
        settings.CommandColumn.ShowDeleteButton = true;
        settings.CommandColumn.ShowEditButton = true;

        settings.KeyFieldName = "order_item_id";

        settings.SettingsPager.Visible = true;
        settings.Settings.ShowGroupPanel = true;
        settings.Settings.ShowFilterRow = true;
        settings.SettingsBehavior.AllowSelectByRowClick = true;
        settings.SettingsSearchPanel.Visible = true;

        // Header Set Center
        settings.Styles.Header.HorizontalAlign = HorizontalAlign.Center;
        settings.Styles.Header.VerticalAlign = VerticalAlign.Middle;

        settings.Columns.Add("quantity").Caption = "Quantity";
        settings.Columns.Add("sub_total").Caption = "Sub Total";
        settings.Columns.Add("discount_fee").Caption = "Discount Fee";
        settings.Columns.Add("RMA_num").Caption = "RMA Number";
        settings.Columns.Add("RMA_issued_by").Caption = "RMA Issued By";

        // RMA Issued Date
        settings.Columns.Add(col => {
            col.FieldName = "RMA_issued_date";
            col.Caption = "RMA Issued Date";
            col.PropertiesEdit.DisplayFormatString = "yyyy-MM-dd";
        });

        settings.Columns.Add("order_id").Caption = "Order ID";
        settings.Columns.Add("order_item_status_id").Caption = "Order Item Status ID"; // Order Item Status?

        // Product ID
        settings.Columns.Add(col => {
            col.FieldName = "Product Code";
            col.UnboundType = DevExpress.Data.UnboundColumnType.String;
        });

        // Last Updated By
        settings.Columns.Add(col =>
        {
            col.FieldName = "Last Updated By";
            col.UnboundType = DevExpress.Data.UnboundColumnType.String;
        });

        settings.CustomUnboundColumnData = (s, e) =>
        {
            if(e.Column.FieldName.Equals("Product Code"))
            {
                int product_id = int.Parse(e.GetListSourceFieldValue("product_id").ToString());
                e.Value = productDict[product_id];
            }

            if (e.Column.FieldName.Equals("Last Updated By"))
            {
                int detail_id = int.Parse(e.GetListSourceFieldValue("detail_id").ToString());
                e.Value = detailDict[detail_id];
            };
        };

        // Cell Styles Center
        settings.Styles.Cell.HorizontalAlign = HorizontalAlign.Center;
        settings.Styles.Cell.VerticalAlign = VerticalAlign.Middle;
    });

    if (ViewData["EditError"] != null){
        grid.SetEditErrorText((string)ViewData["EditError"]);
    }
}
@grid.Bind(Model).GetHtml()